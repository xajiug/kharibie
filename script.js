/* ===============================
   Mini App ‚Äî –ü–û–õ–ù–´–ô –†–ê–ë–û–ß–ò–ô –°–ö–†–ò–ü–¢
   =============================== */

/** 0) Telegram init (–±–µ–∑ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –Ω–µ –≤ Telegram) */
try { Telegram.WebApp.expand(); Telegram.WebApp.ready(); } catch {}
// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ —Å —Ç–µ–º–æ–π Telegram —á–µ—Ä–µ–∑ CSS-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
(function applyTgTheme(){
  const tp = Telegram?.WebApp?.themeParams || {};
  const set = (k, v) => v && document.documentElement.style.setProperty(k, v);
  // Telegram –æ—Ç–¥–∞—ë—Ç —Ü–≤–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, "#RRGGBB"
  set('--bg', tp.bg_color);
  set('--text', tp.text_color);
  set('--card', tp.secondary_bg_color);
  set('--border', tp.section_separator_color);
  set('--primary', tp.button_color);
  set('--primary-cta', tp.button_color); // —Ç—ë–º–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–º –∂–µ
  set('--muted', tp.hint_color);
  Telegram?.WebApp?.onEvent?.('themeChanged', applyTgTheme);
})();


/** 1) –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ (Dev URL Replit) */
const DEFAULT_PAY_SERVER = "https://6117f804-7d7a-4ade-add6-ccd915af353b-00-3loijhr2zu3uh.kirk.replit.dev"; // ‚Üê –ó–ê–ú–ï–ù–ò –±–µ–∑ / –≤ –∫–æ–Ω—Ü–µ

function resolvePayServer() {
  const u = new URL(location.href);
  const q = u.searchParams.get("api");
  if (q) localStorage.setItem("PAY_SERVER", q.replace(/\/$/, ""));
  return (
    (q && q.replace(/\/$/, "")) ||
    localStorage.getItem("PAY_SERVER") ||
    DEFAULT_PAY_SERVER.replace(/\/$/, "")
  );
}
let PAY_SERVER = resolvePayServer();

/** 2) –ü—Ä–æ—Å—Ç—ã–µ —É—Ç–∏–ª–∏—Ç—ã */
const PRICES = { common: 50, rare: 200, epic: 1000, mythic: 5000 };
const RARITIES = ["common", "rare", "epic", "mythic"];

function showToast(text) {
  try {
    if (Telegram?.WebApp?.showPopup) {
      Telegram.WebApp.showPopup({ title: "–°–æ–æ–±—â–µ–Ω–∏–µ", message: text, buttons: [{ type: "close" }] });
      return;
    }
    if (Telegram?.WebApp?.showToast) {
      Telegram.WebApp.showToast(text);
      return;
    }
  } catch {}
  alert(text);
}

function todayStr() {
  const d = new Date();
  return `${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,"0")}-${String(d.getDate()).padStart(2,"0")}`;
}

/** 3) –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */
const LS = { COLLECTION: "app_collection_v1", FREE: "app_free_v1" };
let collection = [];
let free = { date: todayStr(), left: 3 };

function loadState() {
  try { collection = JSON.parse(localStorage.getItem(LS.COLLECTION)) || []; } catch { collection = []; }
  try {
    free = JSON.parse(localStorage.getItem(LS.FREE)) || { date: todayStr(), left: 3 };
    if (free.date !== todayStr()) free = { date: todayStr(), left: 3 };
  } catch { free = { date: todayStr(), left: 3 }; }
}
function saveState() {
  localStorage.setItem(LS.COLLECTION, JSON.stringify(collection));
  localStorage.setItem(LS.FREE, JSON.stringify(free));
}

/** 4) –†–µ–Ω–¥–µ—Ä */
function render() {
  const elLeft = document.querySelector("#free-left");
  if (elLeft) elLeft.textContent = String(free.left);

  const filter = document.querySelector("#filter")?.value || "all";
  const list = collection.filter(c => (filter === "all" ? true : c.rarity === filter));
  const root = document.querySelector("#collection");
  if (root) {
    root.innerHTML = list.length
      ? list.map(c => `<div class="card card-${c.rarity}">
          <div class="title">${c.name}</div>
          <div class="rarity">${c.rarity}</div>
        </div>`).join("")
      : `<div class="empty">–ü–æ–∫–∞ –ø—É—Å—Ç–æ ‚Äî –æ—Ç–∫—Ä–æ–π —Å—É–Ω–¥—É–∫ –∏–ª–∏ –≤–æ–∑—å–º–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é.</div>`;
  }
}

/** 5) –ö–∞—Ä—Ç–æ—á–∫–∏ */
function randomCard(r) {
  const id = `${r}_${Date.now()}_${Math.floor(Math.random()*9999)}`;
  return { id, name: `${r.toUpperCase()} #${id.slice(-4)}`, rarity: r };
}

function openChestLocally(type) {
  const table = {
    common: ["common"],
    rare: ["rare","common","rare"],
    epic: ["epic","rare","epic","common"],
    mythic: ["mythic","epic","rare"]
  };
  const bag = table[type] || ["common"];
  const r = bag[Math.floor(Math.random()*bag.length)];
  collection.push(randomCard(r));
  saveState();
  render();
}

/** 6) –õ–æ–≥–∏ –ø–æ–∫—É–ø–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */
async function logPurchase(type) {
  const user = Telegram?.WebApp?.initDataUnsafe?.user || {};
  const body = { user_id: user.id || null, type, price: PRICES[type] || 0, currency: "XTR", ts: Date.now() };
  try {
    await fetch(`${PAY_SERVER}/api/log-purchase`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(body) });
  } catch {}
}

/** 7) –û–ø–ª–∞—Ç–∞ Stars (–ª–æ–≤–∏–º –∏ callback, –∏ —Å–æ–±—ã—Ç–∏–µ invoiceClosed) */
let invoiceListenerAttached = false;
function attachInvoiceListenerOnce() {
  if (invoiceListenerAttached || !Telegram?.WebApp?.onEvent) return;
  invoiceListenerAttached = true;
  Telegram.WebApp.onEvent("invoiceClosed", (e) => {
    const t = window.__lastBuyType;
    window.__lastBuyType = null;
    if (!t) return;
    if (e?.status === "paid") {
      showToast("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ ‚úÖ –°—É–Ω–¥—É–∫ –æ—Ç–∫—Ä—ã—Ç!");
      openChestLocally(t);
      logPurchase(t);
    } else if (e?.status === "cancelled") {
      showToast("–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå");
    } else {
      showToast("–û–ø–ª–∞—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    }
  });
}

async function buyChest(type) {
  try {
    const res = await fetch(`${PAY_SERVER}/api/create-invoice?type=${encodeURIComponent(type)}`);
    if (!res.ok) throw new Error(`create-invoice ${res.status}`);
    const data = await res.json();
    if (!data.ok || !data.invoice_link) throw new Error("no invoice_link");

    window.__lastBuyType = type;
    attachInvoiceListenerOnce();

    // –∫–æ–ª–±—ç–∫ (—á–∞—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤)
    let callbackFired = false;
    try {
      Telegram.WebApp.openInvoice(data.invoice_link, (status) => {
        callbackFired = true;
        if (status === "paid") {
          window.__lastBuyType = null;
          showToast("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ ‚úÖ –°—É–Ω–¥—É–∫ –æ—Ç–∫—Ä—ã—Ç!");
          openChestLocally(type);
          logPurchase(type);
        } else if (status === "cancelled") {
          window.__lastBuyType = null;
          showToast("–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå");
        }
      });
    } catch {}

    // –ø—Ä–æ–º–∏—Å (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç—ã —Ç–∞–∫ —Ä–µ–∑–æ–ª–≤—è—Ç)
    try { await Telegram.WebApp.openInvoice?.(data.invoice_link); } catch {}

    // –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ ‚Äî –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è —Å–æ–±—ã—Ç–∏–µ–º invoiceClosed
    setTimeout(() => { if (!callbackFired) attachInvoiceListenerOnce(); }, 0);
  } catch (err) {
    showToast("–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
  }
}

/** 8) –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫ UI */
async function checkHealthAndEnv() {
  const envEl = document.querySelector("#env");
  const inTg = Boolean(window.Telegram && Telegram.WebApp && Telegram.WebApp.initData);
  // –ø–∏–Ω–≥—É–µ–º —Å–µ—Ä–≤–µ—Ä, –Ω–æ –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º UI, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  let serverOk = false;
  try {
    const r = await fetch(`${PAY_SERVER}/api/health`, { cache: "no-store" });
    const j = await r.json();
    serverOk = Boolean(j?.success);
  } catch {}
  // –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∫–Ω–æ–ø–∫–∏
  if (envEl) {
    envEl.textContent = `–û–∫—Ä—É–∂–µ–Ω–∏–µ: ${inTg ? "Telegram" : "–ë—Ä–∞—É–∑–µ—Ä"} ‚Ä¢ –°–µ—Ä–≤–µ—Ä: ${serverOk ? "OK" : "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}`;
    envEl.className = "env " + (serverOk ? "ok" : "warn");
  }
}

/** 9) –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–°–õ–ï –ó–ê–ì–†–£–ó–ö–ò DOM */
document.addEventListener("DOMContentLoaded", () => {
  loadState();
  render();

  // –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞
  const btnFree = document.querySelector("#btn-free");
  if (btnFree) {
    btnFree.addEventListener("click", () => {
      if (free.left <= 0) return showToast("–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–∞—Ä—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω");
      collection.push(randomCard("common"));
      free.left -= 1;
      saveState();
      render();
      showToast("–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ üéâ");
    });
  }

  // —Ñ–∏–ª—å—Ç—Ä
  const sel = document.querySelector("#filter");
  if (sel) sel.addEventListener("change", render);

  // —Å—É–Ω–¥—É–∫–∏
  document.querySelectorAll("[data-chest]").forEach(btn => {
    btn.addEventListener("click", () => {
      const type = btn.getAttribute("data-chest");
      if (!PRICES[type]) return;
      buyChest(type);
    });
  });

  // –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç ¬´–∏–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è¬ª)
  checkHealthAndEnv();

  // —Å–ª—É—à–∞—Ç–µ–ª—å invoiceClosed
  attachInvoiceListenerOnce();
});

