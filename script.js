/***** === Telegram WebApp init + –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ === *****/
const tg = (window.Telegram && window.Telegram.WebApp) ? window.Telegram.WebApp : null;
if (tg && tg.ready) tg.ready();
if (tg && tg.expand) tg.expand();

// —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –º—ã ¬´–≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ¬ª, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç WebApp
const isInTelegram = !!tg;
const canSendData = !!(tg && typeof tg.sendData === "function");

function setDebug(msg) {
  const el = document.getElementById("debug");
  if (!el) return;
  el.innerHTML = msg;
}

// –ø–æ–∫–∞–∂–µ–º —Å—Ç–∞—Ç—É—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫—Ä—É–ø–Ω–æ –∏ —è–≤–Ω–æ
setDebug(
  `<b>–°—Ç–∞—Ç—É—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è</b><br>
  isInTelegram: <b>${isInTelegram}</b><br>
  sendData –¥–æ—Å—Ç—É–ø–µ–Ω: <b>${canSendData}</b><br>
  userAgent: ${navigator.userAgent}`
);

/***** === –î–ê–ù–ù–´–ï –ò –ù–ê–°–¢–†–û–ô–ö–ò === *****/
const RARITIES = ["common", "rare", "epic", "mythic"];
const POOLS = {
  common: ["Goblin", "Slime", "Bat", "Rat", "Imp"],
  rare: ["Orc", "Wolf Rider", "Golem", "Harpy"],
  epic: ["Dragon", "Hydra", "Lich", "Kraken"],
  mythic: ["Phoenix", "Leviathan", "Titan"]
};

// –®–∞–Ω—Å—ã —Å—É–Ω–¥—É–∫–æ–≤ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∑–∂–µ)
const CHEST_ODDS = {
  common:  { common: 0.80, rare: 0.20, epic: 0.00, mythic: 0.00 },
  rare:    { common: 0.00, rare: 0.60, epic: 0.40, mythic: 0.00 },
  epic:    { common: 0.00, rare: 0.00, epic: 0.70, mythic: 0.30 },
  mythic:  { common: 0.00, rare: 0.00, epic: 0.00, mythic: 1.00 }
};

const DAILY_FREE = 3;
const LS_KEY = "mc_save_v1";

/***** === –°–û–°–¢–û–Ø–ù–ò–ï === *****/
let state = loadState();

/***** === –•–ï–õ–ü–ï–†–´ === *****/
function todayStr() { return new Date().toISOString().slice(0,10); }

function loadState() {
  let s = { date: todayStr(), freeLeft: DAILY_FREE, collection: {}, filter: "all" };
  try {
    const raw = localStorage.getItem(LS_KEY);
    if (raw) s = { ...s, ...JSON.parse(raw) };
  } catch {}
  if (s.date !== todayStr()) { s.date = todayStr(); s.freeLeft = DAILY_FREE; }
  saveState(s);
  return s;
}
function saveState(s = state) { localStorage.setItem(LS_KEY, JSON.stringify(s)); }
function pick(arr) { return arr[Math.floor(Math.random() * arr.length)]; }

function rollRarityByChest(type) {
  const odds = CHEST_ODDS[type], r = Math.random();
  let acc = 0;
  for (const rar of RARITIES) { acc += odds[rar] || 0; if (r <= acc) return rar; }
  return "common";
}

function addCardToCollection(name, rarity) {
  if (!state.collection[name]) state.collection[name] = { rarity, qty: 0 };
  state.collection[name].qty++;
  saveState();
  renderCollection();
}

/***** === –í–´–ü–ê–î–ï–ù–ò–ï –ö–ê–†–¢ === *****/
function randomCardByRarity(rarity) {
  const pool = POOLS[rarity];
  const name = pick(pool);
  addCardToCollection(name, rarity);
  return { name, rarity };
}

function openFreeCard() {
  if (state.freeLeft <= 0) { return notify("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–∞—Ä—Ç –∏—Å—á–µ—Ä–ø–∞–Ω!"); }
  state.freeLeft--; saveState(); updateFreeLeft();

  const r = Math.random();
  let rarity = "common";
  if (r < 0.02) rarity = "mythic";
  else if (r < 0.08) rarity = "epic";
  else if (r < 0.25) rarity = "rare";

  const c = randomCardByRarity(rarity);
  showResult("cardResult", `–í—ã–ø–∞–ª–∞ –∫–∞—Ä—Ç–∞: <b>${c.name}</b> <span class="badge ${c.rarity}">${c.rarity}</span>`);
}

function openChest(type) {
  const rarity = rollRarityByChest(type);
  const c = randomCardByRarity(rarity);
  showResult("chestResult", `–ò–∑ —Å—É–Ω–¥—É–∫–∞ –≤—ã–ø–∞–ª–∞: <b>${c.name}</b> <span class="badge ${c.rarity}">${c.rarity}</span>`);
}

/***** === –ê–ü–ì–†–ï–ô–î 10 ‚Üí 1 –í–´–®–ï === *****/
function canUpgrade(name) {
  const card = state.collection[name];
  return !!(card && card.qty >= 10 && card.rarity !== "mythic");
}
function upgrade(name) {
  if (!canUpgrade(name)) return notify("–ù—É–∂–Ω–æ ‚â•10 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–∞—Ä—Ç (–∏ –Ω–µ –º–∏—Ñ–∏–∫).");
  const { rarity } = state.collection[name];
  state.collection[name].qty -= 10;
  const nextR = { common:"rare", rare:"epic", epic:"mythic" }[rarity] || "mythic";
  const newCardName = pick(POOLS[nextR]);
  addCardToCollection(newCardName, nextR);
  saveState(); renderCollection();
  showResult("upgradeInfo", `–ê–ø–≥—Ä–µ–π–¥: 10√ó ${rarity} ‚Üí <b>${newCardName}</b> <span class="badge ${nextR}">${nextR}</span>`);
}

/***** === –†–ï–ù–î–ï–† === *****/
function rarityLabel(r){ return {common:"–û–±—ã—á–Ω–∞—è",rare:"–†–µ–¥–∫–∞—è",epic:"–≠–ø–∏—á–µ—Å–∫–∞—è",mythic:"–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è"}[r]||r; }
function updateFreeLeft(){ document.getElementById("cardsLeft").textContent = state.freeLeft; }
function showResult(id, html){ const el=document.getElementById(id); if (el) el.innerHTML = html; }
function notify(text){ alert(text); }

function renderCollection() {
  const list = document.getElementById("collectionList");
  const filter = state.filter;
  const entries = Object.entries(state.collection).sort((a,b)=>a[0].localeCompare(b[0]));
  list.innerHTML = entries.map(([name,data])=>{
    if (filter!=="all" && data.rarity!==filter) return "";
    return `
      <div class="card">
        <div class="name">${name}</div>
        <div class="row">
          <span class="badge ${data.rarity}">${rarityLabel(data.rarity)}</span>
          <span class="qty">√ó ${data.qty}</span>
        </div>
        <div class="row">
          <div class="btns">
            <button class="btn-light" onclick="destroyCard('${name}')">–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å 1</button>
            <button onclick="upgrade('${name}')" ${canUpgrade(name)?"":"disabled"}>–ê–ø–≥—Ä–µ–π–¥ (10‚Üí1)</button>
          </div>
        </div>
      </div>`;
  }).join("");
}

function destroyCard(name){
  const card = state.collection[name];
  if (!card) return;
  card.qty--; if (card.qty<=0) delete state.collection[name];
  saveState(); renderCollection();
}

/***** === –°–õ–£–®–ê–¢–ï–õ–ò === *****/
// –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞
document.getElementById("openCardBtn").addEventListener("click", openFreeCard);

// –°—É–Ω–¥—É–∫–∏: –≤ Telegram -> sendData, –≤ –±—Ä–∞—É–∑–µ—Ä–µ -> –¥–µ–º–æ
document.querySelectorAll("#chests button[data-chest]").forEach(btn=>{
  let lastClick = 0;
  btn.addEventListener("click",(e)=>{
    const now = Date.now();
    if (now - lastClick < 350) { e.preventDefault(); return; } // –∞–Ω—Ç–∏-–¥–≤–æ–π–Ω–æ–π —Ç–∞–ø
    lastClick = now;

    const type = btn.getAttribute("data-chest");

    if (isInTelegram && canSendData) {
      tg.sendData(`BUY_CHEST_${type.toUpperCase()}`);
      showResult("chestResult","üì® –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–æ—Ç—É. –û—Ç–∫—Ä–æ–π —á–∞—Ç: –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç —Å—á—ë—Ç –≤ Stars.");
      setDebug(`<b>–°—Ç–∞—Ç—É—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è</b><br>isInTelegram: <b>${isInTelegram}</b><br>sendData –¥–æ—Å—Ç—É–ø–µ–Ω: <b>${canSendData}</b><br>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: BUY_CHEST_${type.toUpperCase()}`);
    } else {
      // –¥–µ–º–æ-—Ä–µ–∂–∏–º
      openChest(type);
      setDebug(`<b>–°—Ç–∞—Ç—É—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è</b><br>isInTelegram: <b>${isInTelegram}</b><br>sendData –¥–æ—Å—Ç—É–ø–µ–Ω: <b>${canSendData}</b><br>–î–µ–º–æ-—Ä–µ–∂–∏–º: –æ—Ç–∫—Ä—ã—Ç —Å—É–Ω–¥—É–∫ ${type}`);
    }
  }, { passive:false });
});

// –§–∏–ª—å—Ç—Ä—ã
document.querySelectorAll("#filters button[data-filter]").forEach(btn=>{
  btn.addEventListener("click",()=>{
    document.querySelectorAll("#filters button").forEach(b=>b.classList.remove("active"));
    btn.classList.add("active");
    state.filter = btn.getAttribute("data-filter");
    saveState(); renderCollection();
  });
});

// –ê–Ω—Ç–∏-–∑—É–º –ø–æ –¥–≤–æ–π–Ω–æ–º—É —Ç–∞–ø—É
let lastTouchEnd=0;
document.addEventListener('touchend',function(e){
  const now=Date.now();
  if(now-lastTouchEnd<=300){ e.preventDefault(); }
  lastTouchEnd=now;
},{passive:false});

/***** === –°–¢–ê–†–¢ === *****/
updateFreeLeft();
renderCollection();
showResult("upgradeInfo","–ü–æ–¥—Å–∫–∞–∑–∫–∞: –µ—Å–ª–∏ —É –∫–∞—Ä—Ç—ã ‚â•10 –∫–æ–ø–∏–π ‚Äî –∫–Ω–æ–ø–∫–∞ ¬´–ê–ø–≥—Ä–µ–π–¥¬ª —Å—Ç–∞–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π.");
